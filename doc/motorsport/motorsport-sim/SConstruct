import os
#first part of scons path
pwd = os.getenv("PWD")
#detect if current OS follows Filesystem Hierarchy Standard
fhs = pwd[:1] == "/"
sep = "/"
if not fhs:
    sep = "\\"
#merges two configuations
def cfgAppend(cfg, prefix):
    r = cfg.copy()
    for key in cfg:
        try:
            #join strings, append lists
            if type(cfg[key]) == type(""):
                r[key] = cfg[key] + prefix[key]
            else:
                r[key] = cfg[key] + prefix[key]
        except:
            #key prolly doesn't exist
            continue
    return r
#debug printout of a config
def cfgPrint(cfg, prefix="    "):
    for key in cfg:
        print prefix + key + " = ", cfg[key]
#builds and installs the specified config
def cfgBuild(cfg, type):
    env = Environment(CCFLAGS = cfg["ccflags"])
    obj = 0;
    prefix = ARGUMENTS.get('prefix', "usr")
    prefix += sep
    if type == "StaticLibrary" or type == "SharedLibrary":
        if type == "StaticLibrary":
            obj = env.StaticLibrary(target=cfg["name"], source=cfg["sources"], CPPPATH=cfg["includePaths"], LIBPATH=cfg["libPaths"], LIBS=cfg["libs"])
        if type == "SharedLibrary":
            obj = env.SharedLibrary(target=cfg["name"], source=cfg["sources"], CPPPATH=cfg["includePaths"], LIBPATH=cfg["libPaths"], LIBS=cfg["libs"])
        env.Install(prefix+"lib"+sep+cfg["name"], obj)
        for header in (cfg["headers"]):
            env.Install(prefix+"include"+sep+cfg["name"], header)
    if type == "Program":
        obj = env.Program (target=cfg["name"], source=cfg["sources"], CPPPATH=cfg["includePaths"], LIBPATH=cfg["libPaths"], LIBS=cfg["libs"])
        env.Install(prefix+"bin", obj)
    return obj
#builds and installs the merged configs
def build (cfgs, type, cfgName):
    r = {}
    r["cfg"] = cfgAppend(cfgs["default"], cfgs[cfgName])
    r["obj"] = cfgBuild(r["cfg"], type)
    return r

#configurations
cfgSim = {
    "default": {
        "name": "motorsport-sim"
        ,"includePaths": Split(".. /usr/include/boost /usr/include/boost-1_33_1")
        ,"libPaths": Split("usr/lib/motorsportD/ ")
        ,"libs": Split("motorsportD ")
        ,"sources": Split("Sim.cpp main.cpp ")
        ,"headers": Split("Sim.h ")
        ,"ccflags": "-Wall -Wextra -Wno-deprecated "
        }
    ,"debug": {
        "name":"D"
        ,"ccflags": "-g"
        }
    ,"release": {
        }
    }
#sim = build(cfgSim, "StaticLibrary", "debug");
#sim = build(cfgSim, "SharedLibrary", "debug");
sim = build(cfgSim, "Program", "debug");
#cfgPrint(core["cfg"], "sim.")
