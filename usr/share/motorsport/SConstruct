################################################################################
# Build System
################################################################################
import os

# debug printout of a config
def cfgPrint(cfg, prefix="    "):
    for key in cfg:
        print prefix + key + " = ", cfg[key]

# merges two configuations
def cfgAppend(cfg, suffix):
    for key in cfg:
        try:
            separator = " "
            if key == "name" or cfg[key] == "":
                separator = ""
            #join strings, append lists
            if type(cfg[key]) == type(""):
                cfg[key] = cfg[key] + separator + suffix[key]
            else:
                cfg[key] = cfg[key] + separator + suffix[key]
        except:
            #key prolly doesn't exist
            continue

# builds and installs the specified config
def cfgBuild(cfg, type):
    env = Environment(CCFLAGS = cfg["ccflags"], LINKFLAGS = cfg["ccflags"], CPPPATH=Split(cfg["includePaths"]), LIBPATH=Split(cfg["libPaths"]), LIBS=Split(cfg["libs"]), STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME=1)
    obj = 0;
    prefix = ARGUMENTS.get('prefix', ".")
    if type == "StaticLibrary" or type == "SharedLibrary":
        if type == "StaticLibrary":
            obj = env.StaticLibrary(target=cfg["name"], source=Split(cfg["sources"]))
        if type == "SharedLibrary":
            obj = env.SharedLibrary(target=cfg["name"], source=Split(cfg["sources"]))
        env.Install(os.path.join(prefix,cfg["libInstallPath"]), obj)
        for header in (Split(cfg["headers"])):
            env.Install(os.path.join(prefix,cfg["includeInstallPath"]), header)
    if type == "Program":
        obj = env.Program (target=cfg["name"], source=Split(cfg["sources"]))
        env.Install(os.path.join(prefix,cfg["binInstallPath"]), obj)
    return obj

# appends and builds
def build(type, cfgs):
    r = {
        "name":                 ""
        ,"includePaths":        ""
        ,"libPaths":            ""
        ,"libs":                ""
        ,"sources":             ""
        ,"headers":             ""
        ,"ccflags":             ""
        ,"includeInstallPath":  ""
        ,"libInstallPath":      ""
        ,"binInstallPath":      ""
        }
    for cfg in cfgs:
        cfgAppend(r, cfg)
    obj = cfgBuild(r, type)
    return obj

################################################################################
# Build Configurations
################################################################################
cfgDebug = { "name":"D" ,"ccflags":"-g" }
cfgWarns = { "ccflags":"-Wall -Wextra -Wno-deprecated" }
cfgCov = { "ccflags":"-fprofile-arcs -ftest-coverage" }
cfgInstall = {"includeInstallPath":"include"
             ,"libInstallPath":"lib"
             ,"binInstallPath":"bin"}
cfgBoost = { "includePaths":"/usr/include/boost" }
cfgUnitTest = { "sources":"../../lib/libUnitTest++.a" }

################################################################################
# Builds
################################################################################
cfgMotorsport = {
    "name":         "motorsport"
    ,"sources":     "Core.cpp Loggable.cpp Group.cpp Exception.cpp"
    ,"headers":     "Core.h Group.h Loggable.h Exception.h"
    }
objMotorsport = build("SharedLibrary", [cfgMotorsport, cfgDebug, cfgWarns, cfgCov, cfgInstall, cfgBoost])

cfgTests = {
    "name":         "-tests"
    ,"includePaths":"../../include"
    ,"libPaths":    "../../lib/motorsport"
    ,"libs":        ""
    ,"sources":     "main.cpp"
    }
objTests = build("Program", [cfgMotorsport, cfgTests, cfgDebug, cfgWarns, cfgCov, cfgInstall, cfgBoost, cfgUnitTest])
