import os
#merges two configuations
def cfgAppend(cfg, prefix):
    r = cfg.copy()
    for key in cfg:
        try:
            #join strings, append lists
            if type(cfg[key]) == type(""):
                r[key] = cfg[key] + prefix[key]
            else:
                r[key] = cfg[key] + prefix[key]
        except:
            #key prolly doesn't exist
            continue
    return r
#debug printout of a config
def cfgPrint(cfg, prefix="    "):
    for key in cfg:
        print prefix + key + " = ", cfg[key]
#builds and installs the specified config
def cfgBuild(cfg, type):
    env = Environment(CCFLAGS = cfg["ccflags"], LINKFLAGS = cfg["ccflags"], CPPPATH=cfg["includePaths"], LIBPATH=cfg["libPaths"], LIBS=cfg["libs"], STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME=1)
    obj = 0;
    prefix = ARGUMENTS.get('prefix', ".")
    if type == "StaticLibrary" or type == "SharedLibrary":
        if type == "StaticLibrary":
            obj = env.StaticLibrary(target=cfg["name"], source=cfg["sources"])
        if type == "SharedLibrary":
            obj = env.SharedLibrary(target=cfg["name"], source=cfg["sources"])
        env.Install(os.path.join(prefix,cfg["libInstallPath"]), obj)
        for header in (cfg["headers"]):
            env.Install(os.path.join(prefix,cfg["includeInstallPath"]), header)
    if type == "Program":
        obj = env.Program (target=cfg["name"], source=cfg["sources"])
        env.Install(os.path.join(prefix,cfg["binInstallPath"]), obj)
    return obj
#builds and installs the merged configs
def build (cfgs, type, cfgName):
    r = {}
    r["cfg"] = cfgAppend(cfgs["default"], cfgs[cfgName])
    r["obj"] = cfgBuild(r["cfg"], type)
    return r

#configurations
cfgTest = {
    "default": {
        "name": "tddTest"
        ,"includePaths": Split("../../include")
        ,"libPaths": Split("../../lib")
        ,"libs": Split("")
        ,"sources": Split("main.cpp ../../lib/libUnitTest++.a")
        ,"headers": Split("")
        ,"ccflags": "-fprofile-arcs -ftest-coverage -Wall -Wextra -Wno-deprecated "
        ,"includeInstallPath": "include"
        ,"libInstallPath": "lib"
        ,"binInstallPath": "bin"
        }
    ,"debug": {
        "name":"D"
        ,"ccflags": "-g"
        }
    ,"release": {
        }
    }
#tddTest = build(cfgTest, "StaticLibrary", "debug");
#tddTest = build(cfgTest, "SharedLibrary", "debug");
tddTest = build(cfgTest, "Program", "release");
#cfgPrint(core["cfg"], "sim.")
