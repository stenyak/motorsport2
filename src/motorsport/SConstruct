def cfgAppend(cfg, prefix):
    r = cfg.copy()
    for key in cfg:
        try:
            #join strings, append lists
            if type(cfg[key]) == type(""):
                r[key] = cfg[key] + prefix[key]
            else:
                r[key] = cfg[key] + prefix[key]
        except:
            #key prolly doesn't exist
            continue
    return r

def cfgPrint(cfg, prefix="    "):
    for key in cfg:
        print prefix + key + " = ", cfg[key]

def cfgBuild(cfg, type):
    env = Environment(CCFLAGS = cfg["ccflags"])
    obj = 0;
    usr = "..\\..\\usr\\"
    if type == "StaticLibrary" or type == "SharedLibrary":
        if type == "StaticLibrary":
            obj = env.StaticLibrary(target=cfg["name"], source=cfg["sources"], CPPPATH=cfg["includePaths"], LIBPATH=cfg["libPaths"], LIBS=cfg["libs"])
        if type == "SharedLibrary":
            obj = env.SharedLibrary(target=cfg["name"], source=cfg["sources"], CPPPATH=cfg["includePaths"], LIBPATH=cfg["libPaths"], LIBS=cfg["libs"])
        env.Install(usr+"lib", obj)
        for header in (cfg["headers"]):
            dir = usr+"include\\"
            Command(dir+header, header, Copy("$TARGET", "$SOURCE"))
    if type == "Program":
        obj = env.Program (target=cfg["name"], source=cfg["sources"], CPPPATH=cfg["includePaths"], LIBPATH=cfg["libPaths"], LIBS=cfg["libs"])
        env.Install(usr+"bin", obj)
    return obj


def build (cfgs, type, cfgName):
    r = {}
    r["cfg"] = cfgAppend(cfgs["default"], cfgs[cfgName])
    r["obj"] = cfgBuild(r["cfg"], type)
    return r

cfgMotorsportSim = {
    "default": {
        "name": "MotorsportSim"
        ,"includePaths": Split("../../usr/include /usr/include/boost-1_33_1")
        ,"libPaths": Split("../../usr/lib")
        ,"libs": Split("StkLogD")
        ,"sources": Split("Motorsport.cpp MotorsportConfig.cpp")
        ,"headers": Split("Motorsport.h")
        ,"ccflags": "-Wall -Wextra -pedantic "
        }
    ,"debug": {
        "name":"D"
        ,"ccflags": "-g"
        }
    ,"release": {
        }
    }
motorsportSim = build(cfgMotorsportSim, "StaticLibrary", "debug");
#motorsportSim = build(cfgMotorsportSim, "SharedLibrary", "debug");
#motorsportSim = build(cfgMotorsportSim, "Program", "debug");
#cfgPrint(motorsportSim["cfg"], "mosp.")
cfgMotorsport = {
    "default": {
        "name": "Motorsport"
        ,"includePaths": [motorsportSim["cfg"]["includePaths"],
                          Split("../../usr/include /usr/include/boost-1_33_1")]
        ,"libPaths": [motorsportSim["cfg"]["libPaths"],
                     Split(".")]
        ,"libs": [motorsportSim["obj"],
                  motorsportSim["cfg"]["libs"],
                  Split("boost_program_options-gcc-mt")]
        ,"sources": Split("main.cpp")
        ,"headers": Split(" ")
        ,"ccflags": "-Wall -Wextra -pedantic "
        }
    ,"debug": {
        "name":"D"
        ,"ccflags": "-g "
        }
    ,"release": {
        }
    }
motorsport = build(cfgMotorsport, "Program", "debug");
#cfgPrint(motorsport["cfg"], "tests.")