import os

#first part of scons path
pwd = os.getenv("PWD")

#detect if current OS follows Filesystem Hierarchy Standard
fhs = pwd[:1] == "/"
sep = "/"

if not fhs:
    sep = "\\"

def cfgAppend(cfg, prefix):
    r = cfg.copy()
    for key in cfg:
        try:
            #join strings, append lists
            if type(cfg[key]) == type(""):
                r[key] = cfg[key] + prefix[key]
            else:
                r[key] = cfg[key] + prefix[key]
        except:
            #key prolly doesn't exist
            continue
    return r

def cfgPrint(cfg, prefix="    "):
    for key in cfg:
        print prefix + key + " = ", cfg[key]

def cfgBuild(cfg, type):
    env = Environment(CCFLAGS = cfg["ccflags"])
    obj = 0;
    usr = ".."+sep+".."+sep+"usr"+sep+""
    if type == "StaticLibrary" or type == "SharedLibrary":
        if type == "StaticLibrary":
            obj = env.StaticLibrary(target=cfg["name"], source=cfg["sources"], CPPPATH=cfg["includePaths"], LIBPATH=cfg["libPaths"], LIBS=cfg["libs"])
        if type == "SharedLibrary":
            obj = env.SharedLibrary(target=cfg["name"], source=cfg["sources"], CPPPATH=cfg["includePaths"], LIBPATH=cfg["libPaths"], LIBS=cfg["libs"])
        env.Install(usr+"lib", obj)
        for header in (cfg["headers"]):
            dir = usr+"include"+sep+""
            Command(dir+header, header, Copy("$TARGET", "$SOURCE"))
    if type == "Program":
        obj = env.Program (target=cfg["name"], source=cfg["sources"], CPPPATH=cfg["includePaths"], LIBPATH=cfg["libPaths"], LIBS=cfg["libs"])
        env.Install(usr+"bin", obj)
    return obj

def build (cfgs, type, cfgName):
    r = {}
    r["cfg"] = cfgAppend(cfgs["default"], cfgs[cfgName])
    r["obj"] = cfgBuild(r["cfg"], type)
    return r

cfgLog = {
    "default": {
        "name": "StkLog"
        ,"includePaths": Split("/usr/include /usr/include/boost /usr/include/boost-1_33_1")
        ,"libPaths": Split(" ")
        ,"libs": Split(" ")
        ,"sources": Split("Log.cpp")
        ,"headers": Split("Log.h")
        ,"ccflags": "-Wall -Wextra -Wno-deprecated "
        }
    ,"debug": {
        "name":"D"
        ,"ccflags": "-g"
        }
    ,"release": {
        }
    }
#log = build(cfgLog, "StaticLibrary", "debug");
log = build(cfgLog, "SharedLibrary", "debug");
#cfgPrint(log["cfg"], "log.")
cfgTests = {
    "default": {
        "name": "Tests"
        ,"includePaths": [log["cfg"]["includePaths"],
                          Split("../../deps/testsoon/include")]
        ,"libPaths": Split(".")
        ,"libs": [log["obj"],
                  Split(" ")]
        ,"sources": Split("Tests.cpp")
        ,"headers": Split(" ")
        ,"ccflags": "-Wall -Wextra "
        }
    ,"debug": {
        "name":"D"
        ,"ccflags": "-g "
        }
    ,"release": {
        }
    }
tests = build(cfgTests, "Program", "debug");
#cfgPrint(tests["cfg"], "tests.")
