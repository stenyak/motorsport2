################################################################################
# Build System
################################################################################
import os

# debug printout of a config
def cfgPrint(cfg, prefix="    "):
    for key in cfg:
        print prefix + key + " = ", cfg[key]

# merges two configuations
def cfgAppend(cfg, suffix):
    for key in cfg:
        try:
            separator = " "
            if cfg[key] == "" or key == "name":
                separator = ""
            #join strings, append lists
            if type(cfg[key]) == type(""):
                cfg[key] = cfg[key] + separator + suffix[key]
            else:
                cfg[key] = cfg[key] + separator + suffix[key]
        except:
            #key prolly doesn't exist
            continue

# builds and installs the specified config
def cfgBuild(cfg, type):
    env = Environment(CCFLAGS = cfg["ccflags"], LINKFLAGS = cfg["ccflags"], CPPPATH=Split(cfg["includePaths"]), LIBPATH=Split(cfg["libPaths"]), LIBS=Split(cfg["libs"]), STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME=1)
    obj = 0;
    prefix = ARGUMENTS.get('prefix', "usr")
    if type == "StaticLibrary" or type == "SharedLibrary":
        if type == "StaticLibrary":
            obj = env.StaticLibrary(target=cfg["name"], source=Split(cfg["sources"]))
        if type == "SharedLibrary":
            obj = env.SharedLibrary(target=cfg["name"], source=Split(cfg["sources"]))
        env.Install(os.path.join(prefix, "lib",cfg["name"]), obj)
        for header in (Split(cfg["headers"])):
            env.Install(os.path.join(prefix, "include", cfg["name"]), header)
    if type == "Program":
        obj = env.Program (target=cfg["name"], source=Split(cfg["sources"]))
        env.Install(os.path.join(prefix, "bin"), obj)
    return obj

# appends and builds
def build(type, cfgs):
    r = {
        "name":                 ""
        ,"includePaths":        ""
        ,"libPaths":            ""
        ,"libs":                ""
        ,"sources":             ""
        ,"headers":             ""
        ,"ccflags":             ""
        }
    for cfg in cfgs:
        cfgAppend(r, cfg)
    obj = cfgBuild(r, type)
    return obj

# prefixes usr/share/<project>/ to source and header filenames
def cfgSet(cfg):
    for key in cfg:
        try:
            if key == "sources" or key == "headers":
                items = [];
                for item in (Split(cfg[key])):
                    items.append(os.path.join("usr","share",cfg["name"],item))
                cfg[key] = " ".join(items)
        except:
            #key prolly doesn't exist
            continue

################################################################################
# Build Configurations
################################################################################
cfgDebug = { "ccflags":"-g" }
cfgWarns = { "ccflags":"-Wall -Wextra -Wno-deprecated" }
cfgCov = { "ccflags":"-fprofile-arcs -ftest-coverage" }
depBoost = { "includePaths":"/usr/include/boost usr/include" }
depUnitTest = { "includePaths":"usr/include" , "sources":"usr/lib/libUnitTest++.a" }
#depUnitTest = { "includePaths":"usr/include" }

################################################################################
# Builds
################################################################################
cfgMotorsport = { "name": "motorsport"
    ,"sources":     "Core.cpp Loggable.cpp Group.cpp Exception.cpp"
    ,"headers":     "Core.h Group.h Loggable.h Exception.h"
    }
cfgSet(cfgMotorsport)
objMotorsport = build("SharedLibrary", [cfgMotorsport, cfgDebug, cfgWarns, cfgCov, depBoost])
depMotorsport = { "libPaths":"usr/lib/motorsport", "libs":"motorsport", "includePaths":"usr/include/motorsport" }

cfgTests = { "name": "motorsport-tests" ,"sources": "main.cpp" }
cfgSet(cfgTests)
objTests = build("Program", [depMotorsport, cfgTests, cfgDebug, cfgWarns, cfgCov, depBoost, depUnitTest])


cfgMotorsportSimLib = { "name": "motorsport-sim" ,"sources": "Sim.cpp" ,"headers": "Sim.h" }
cfgSet(cfgMotorsportSimLib)
objMotorsportSimLib = build("StaticLibrary", [cfgMotorsportSimLib, cfgDebug, cfgWarns, cfgCov, depBoost, depMotorsport])
cfgMotorsportSimLibDep = {"libPaths":"usr/lib/motorsport-sim","libs":"".join(map(str, objMotorsportSimLib)), "includePaths":"usr/include/motorsport-sim" }

cfgMotorsportSim = { "name": "motorsport-sim" ,"sources": "main.cpp" }
cfgSet(cfgMotorsportSim)
objMotorsportSim = build("Program", [cfgMotorsportSim, cfgDebug, cfgWarns, cfgCov, depBoost, depMotorsport, cfgMotorsportSimLibDep])

cfgMotorsportSimTests = { "name": "motorsport-sim-tests" ,"sources": "tests.cpp" }
cfgSet(cfgMotorsportSimTests)
objMotorsportSimTests = build("Program", [cfgMotorsportSimTests, cfgDebug, cfgWarns, cfgCov, depBoost, depUnitTest, depMotorsport, cfgMotorsportSimLibDep])
