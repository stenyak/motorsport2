################################################################################
# Build System
################################################################################
import os

# debug printout of a config
def cfgPrint(cfg, prefix="    "):
    for key in cfg:
        print prefix + key + " = ", cfg[key]

# merges two configuations
def cfgAppend(cfg, suffix):
    for key in cfg:
        try:
            separator = " "
            if cfg[key] == "" or key == "name":
            #if cfg[key] == "" or key == "name" or key == "includeInstallPath" or key == "libInstallPath" or key == "binInstallPath":
                separator = ""
            #join strings, append lists
            if type(cfg[key]) == type(""):
                cfg[key] = cfg[key] + separator + suffix[key]
            else:
                cfg[key] = cfg[key] + separator + suffix[key]
        except:
            #key prolly doesn't exist
            continue

# builds and installs the specified config
def cfgBuild(cfg, type):
    env = Environment(CCFLAGS = cfg["ccflags"], LINKFLAGS = cfg["ccflags"], CPPPATH=Split(cfg["includePaths"]), LIBPATH=Split(cfg["libPaths"]), LIBS=Split(cfg["libs"]), STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME=1)
    obj = 0;
    prefix = ARGUMENTS.get('prefix', "usr")
    if type == "StaticLibrary" or type == "SharedLibrary":
        if type == "StaticLibrary":
            obj = env.StaticLibrary(target=cfg["name"], source=Split(cfg["sources"]))
        if type == "SharedLibrary":
            obj = env.SharedLibrary(target=cfg["name"], source=Split(cfg["sources"]))
        env.Install(os.path.join(prefix, "lib",cfg["name"]), obj)
        for header in (Split(cfg["headers"])):
            env.Install(os.path.join(prefix, "include", cfg["name"]), header)
    if type == "Program":
        obj = env.Program (target=cfg["name"], source=Split(cfg["sources"]))
        env.Install(os.path.join(prefix, "bin"), obj)
    return obj

# appends and builds
def build(type, cfgs):
    r = {
        "name":                 ""
        ,"includePaths":        ""
        ,"libPaths":            ""
        ,"libs":                ""
        ,"sources":             ""
        ,"headers":             ""
        ,"ccflags":             ""
        }
    for cfg in cfgs:
        cfgAppend(r, cfg)
    obj = cfgBuild(r, type)
    return obj

################################################################################
# Build Configurations
################################################################################
cfgDebug = { "ccflags":"-g" }
cfgWarns = { "ccflags":"-Wall -Wextra -Wno-deprecated" }
cfgCov = { "ccflags":"-fprofile-arcs -ftest-coverage" }
cfgBoost = { "includePaths":"/usr/include/boost usr/include" }
cfgUnitTest = { "includePaths":"usr/include" , "sources":"usr/lib/libUnitTest++.a" }
#cfgUnitTest = { "includePaths":"../../include ../../include" }
cfgMotorsport = { "libPaths":"usr/lib/motorsport", "libs":"motorsport", "includePaths":"usr/include" }


# merges source file paths
def cfgSet(cfg):
    key["sources"] = prepend("usr/share/" + key["name"], key["sources"])
    key["headers"] = prepend("usr/share/" + key["name"], key["sources"])
################################################################################
# Builds
################################################################################
cfgMotorsportLib = {
    "name":         "motorsport"
    ,"sources":     "usr/share/motorsport/Core.cpp usr/share/motorsport/Loggable.cpp usr/share/motorsport/Group.cpp usr/share/motorsport/Exception.cpp"
    ,"headers":     "usr/share/motorsport/Core.h usr/share/motorsport/Group.h usr/share/motorsport/Loggable.h usr/share/motorsport/Exception.h"
    }
objMotorsportLib = build("SharedLibrary", [cfgMotorsportLib, cfgDebug, cfgWarns, cfgCov, cfgBoost])
# Motorsport-tests
cfgTests = {
    "name":         "motorsport-tests"
    ,"sources":     "usr/share/motorsport-tests/main.cpp"
    }
objTests = build("Program", [cfgMotorsport, cfgTests, cfgDebug, cfgWarns, cfgCov, cfgBoost, cfgUnitTest])
# Motorsport-sim-lib
cfgMotorsportSimLib = {
    "name":         "motorsport-sim"
    ,"sources":     "usr/share/motorsport-sim/Sim.cpp"
    }
objMotorsportSimLib = build("SharedLibrary", [cfgMotorsportSimLib, cfgDebug, cfgWarns, cfgCov, cfgBoost, cfgMotorsport])
# Motorsport-sim
cfgMotorsportSim = {
    "name":         ""
    ,"sources":     "usr/share/motorsport-sim/main.cpp"
    ,"headers":     ""
    }
objMotorsportSim = build("Program", [cfgMotorsportSimLib, cfgMotorsportSim, cfgDebug, cfgWarns, cfgCov, cfgBoost, cfgMotorsport])
# Motorsport-sim-tests
cfgMotorsportSimTests = {
    "name":         "-tests"
    ,"sources":     "usr/share/motorsport-sim/tests.cpp"
    }
objMotorsportSimTests = build("Program", [cfgMotorsportSimLib, cfgMotorsportSimTests, cfgDebug, cfgWarns, cfgCov, cfgBoost, cfgUnitTest, cfgMotorsport])
