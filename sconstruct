################################################################################
# Build System
################################################################################
import os
BuildDir('build', "usr")

# debug printout of a config
def cfgPrint(cfg, prefix="    "):
    for key in cfg:
        print prefix + key + " = ", cfg[key]

# merges two configuations
def cfgAppend(cfg, suffix):
    for key in cfg:
        try:
            separator = " "
            if cfg[key] == "" or key == "name":
                separator = ""
            #join strings, append lists
            if type(cfg[key]) == type(""):
                cfg[key] = cfg[key] + separator + suffix[key]
            else:
                cfg[key] = cfg[key] + separator + suffix[key]
        except:
            #key prolly doesn't exist
            continue

# builds and installs the specified config
def cfgBuild(cfg, type):
    env = Environment(CCFLAGS = cfg["ccflags"], LINKFLAGS = cfg["ccflags"], CPPPATH=Split(cfg["includePaths"]), LIBPATH=Split(cfg["libPaths"]), LIBS=Split(cfg["libs"]), STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME=1)
    obj = 0;
    prefix = ARGUMENTS.get('prefix', "usr")
    if type == "StaticLibrary" or type == "SharedLibrary":
        if type == "StaticLibrary":
            obj = env.StaticLibrary(target=cfg["name"], source=Split(cfg["sources"]))
        if type == "SharedLibrary":
            obj = env.SharedLibrary(target=cfg["name"], source=Split(cfg["sources"]))
        env.Install(os.path.join(prefix, "lib",cfg["name"]), obj)
        for header in (Split(cfg["headers"])):
            env.Install(os.path.join(prefix, "include", cfg["name"]), header)
    if type == "Program":
        obj = env.Program (target=cfg["name"], source=Split(cfg["sources"]))
        env.Install(os.path.join(prefix, "bin"), obj)
    return obj

# appends and builds
def build(type, cfgs):
    r = {
        "name":                 ""
        ,"includePaths":        ""
        ,"libPaths":            ""
        ,"libs":                ""
        ,"sources":             ""
        ,"headers":             ""
        ,"ccflags":             ""
        }
    n = 0
    for cfg in cfgs:
        n = n+1
        cfgAppend(r, cfg)
        if n == 1:
            cfgSet(r)
    obj = cfgBuild(r, type)
    return obj

# prefixes usr/share/<project>/ to source and header filenames
def cfgSet(cfg):
    for key in cfg:
        try:
            if key == "sources" or key == "headers":
                items = [];
                for item in (Split(cfg[key])):
                    items.append(os.path.join("usr","share",cfg["name"],item))
                cfg[key] = " ".join(items)
        except:
            #key prolly doesn't exist
            continue

################################################################################
# Build Configurations
################################################################################
cfgDebug = { "ccflags":"-g -O0 -ggdb3" }
cfgWarns = { "ccflags":"-Wall -Wno-deprecated -ansi -pedantic" }
cfgCov = { "ccflags":"--coverage -fprofile-arcs -ftest-coverage" }
depBoostShared = { "ccflags":"-isystem usr/include/boost-1_35", "includePaths":"usr/include usr/include/boost-1_35" }
depBoostDate = { "ccflags":"-isystem usr/include/boost-1_35", "libs":"boost_date_time", "includePaths":"usr/include/boost-1_35", "libPaths":"usr/lib" }
depBoostThread = { "ccflags":"-isystem usr/include/boost-1_35", "libs":"boost_thread-gcc41-mt-1_35", "includePaths":"usr/include/boost-1_35", "libPaths":"usr/lib" }

depOgre = { "ccflags":"-fmessage-length=0 -fexceptions -fident -isystem usr/include/OGRE", "libs":"OgreMain", "includePaths":"usr/include/OGRE", "libPaths":"usr/lib" }
depOgreCollada = { "libs":"OgreCollada FCollada", "includePaths":"usr/include", "libPaths":"usr/lib" }
depMotorsport = { "libPaths":"usr/lib/motorsport", "libs":"motorsport", "includePaths":"usr/include" }
depOIS = { "libs":"OIS" }
depUnitTest = { "ccflags":"-isystem usr/include/unittest++", "includePaths":"usr/include" , "libPaths":"usr/lib", "libs":"UnitTest++" }
#depUnitTest = { "includePaths":"usr/include" }
depMotorsport = { "libPaths":"usr/lib/motorsport", "libs":"motorsport", "includePaths":"usr/include" }
depMotorsportSim = {"libPaths":"usr/lib/motorsport-sim","libs":"motorsport-sim", "includePaths":"usr/include" }

################################################################################
# Builds
################################################################################
cfgMotorsport = { "name": "motorsport" ,"sources": "Os.cpp Core.cpp Loggable.cpp Group.cpp Exception.cpp Physics.cpp Threadable.cpp" ,"headers": "Os.h Core.h Group.h Loggable.h Exception.h Physics.h Threadable.h" }
objMotorsport = build("SharedLibrary", [cfgMotorsport, cfgDebug, cfgWarns, cfgCov, depBoostShared])

cfgMotorsportTests = { "name": "motorsport-tests" ,"sources": "main.cpp" }
objTests = build("Program", [cfgMotorsportTests, cfgDebug, cfgWarns, cfgCov, depMotorsport, depBoostShared, depBoostDate, depBoostThread, depUnitTest])


cfgDepMotorsportSim = { "name": "motorsport-sim" ,"sources": "Sim.cpp Graphics.cpp" ,"headers": "Sim.h Graphics.h GraphicsHelper.h" }
objDepMotorsportSim = build("StaticLibrary", [cfgDepMotorsportSim, cfgDebug, cfgWarns, cfgCov, depBoostShared, depMotorsport, depOgre, depOIS, depOgreCollada])

cfgMotorsportSim = { "name": "motorsport-sim" ,"sources": "main.cpp" }
objMotorsportSim = build("Program", [cfgMotorsportSim, cfgDebug, cfgWarns, cfgCov, depBoostShared, depBoostThread, depMotorsport, depMotorsportSim, depOgre, depOIS, depOgreCollada])

cfgMotorsportSimTests = { "name": "motorsport-sim-tests" ,"sources": "tests.cpp" }
objMotorsportSimTests = build("Program", [cfgMotorsportSimTests, cfgDebug, cfgWarns, cfgCov, depBoostShared, depBoostThread, depUnitTest, depMotorsport, depMotorsportSim, depOgre, depOIS, depOgreCollada])

cfgThreadTest = { "name": "thread-test" ,"sources": "main.cpp" }
objThreadTest = build("Program", [cfgThreadTest, cfgDebug, cfgWarns, cfgCov, depBoostShared, depUnitTest ])
