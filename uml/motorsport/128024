format 49
"motorsport" // motorsport
  revision 22
  modified_by 71 "stenyak"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default
  
  cpp_h_dir "motorsport"
  cpp_src_dir "motorsport"
  cpp_namespace "motorsport"
  deploymentview 128024 "deployment"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default
    artifact 129253 "Core"
      stereotype "source"
      cpp_h "/** Copyright (C) 2008 Motorsport Project contributors (see license.txt) */
#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H
${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 129253 // Core
      end
    end

    artifact 129381 "Group"
      stereotype "source"
      cpp_h "/** Copyright (C) 2008 Motorsport Project contributors (see license.txt) */
#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H
${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 129381 // Group
      end
    end

    artifact 129154 "Loggable"
      stereotype "source"
      cpp_h "/** Copyright (C) 2008 Motorsport Project contributors (see license.txt) */
#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H
${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 129637 // Loggable
      end
    end

    artifact 128035 "Exception"
      stereotype "source"
      cpp_h "/** Copyright (C) 2008 Motorsport Project contributors (see license.txt) */
#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H
${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128163 // Exception
      end
    end

    artifact 128085 "Physics"
      stereotype "source"
      cpp_h "/** Copyright (C) 2008 Motorsport Project contributors (see license.txt) */
#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H
${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128085 // Physics
      end
    end

    artifact 128213 "Threadable"
      stereotype "source"
      cpp_h "/** Copyright (C) 2008 Motorsport Project contributors (see license.txt) */
#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H
${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128213 // Threadable
      end
    end

    artifact 128249 "Os"
      stereotype "source"
      cpp_h "/** Copyright (C) 2008 Motorsport Project contributors (see license.txt) */
#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H
#define MOTORSPORT_OS_WIN32 1
#define MOTORSPORT_OS_LINUX 2
#define MOTORSPORT_OS_APPLE 3

#if defined( __WIN32__ ) || defined( _WIN32 )
    #define MOTORSPORT_OS MOTORSPORT_OS_WIN32
#elif defined( __APPLE_CC__)
    #define MOTORSPORT_OS MOTORSPORT_OS_APPLE
#else
    #define MOTORSPORT_OS MOTORSPORT_OS_LINUX
#endif

#if MOTORSPORT_OS == MOTORSPORT_OS_APPLE
    #include <CoreFoundation/CoreFoundation.h>
#endif
${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128121 // Os
      end
    end
  end

  classview 128152 "model"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default
    associated_deployment_view deploymentview_ref 128024 // deployment
    class 128035 "enable_shared_from_this"
      visibility package 
      nformals 1
      formal name "X" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_external cpp_decl "${name}
#include <boost/${name}.hpp>
using namespace boost;"
      java_decl ""
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/** From Boost libraries. Allows to retrieve ones own shared pointer. */"
    end

    class 128106 "bind"
      visibility package 
      cpp_external cpp_decl "${name}
#include <boost/${name}.hpp>
using namespace boost;"
      java_decl ""
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/** From Boost libraries.*/"
    end

    class 128234 "mutex"
      visibility package 
      cpp_external cpp_decl "${name}
#include <boost/thread/mutex.hpp>
using namespace boost;"
      java_decl ""
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/** From Boost libraries.*/"
    end

    class 128362 "scoped_lock"
      visibility package 
      cpp_external cpp_decl "${name}
#include <boost/thread/mutex.hpp>
using namespace boost;"
      java_decl ""
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/** From Boost libraries.*/"
    end

    class 128618 "posix_time"
      visibility package 
      cpp_external cpp_decl "${name}
#include <boost/date_time/${name}/${name}.hpp>
using namespace boost::${name};"
      java_decl ""
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/** From Boost libraries. Allows to handle threads. */"
    end

    class 128341 "thread"
      visibility package 
      cpp_external cpp_decl "${name}
#include <boost/${name}/${name}.hpp>
using namespace boost;"
      java_decl ""
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/** From Boost libraries. Allows to handle threads. */"
    end

    class 128291 "exception"
      visibility package 
      cpp_external cpp_decl "${name}
#include <${name}>
using namespace std;"
      java_decl ""
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/** From standard C classes. Base class for all custom exceptions. */"
    end

    class 128071 "operations"
      visibility package 
      cpp_external cpp_decl "${name}
#include <boost/filesystem/${name}.hpp>"
      java_decl ""
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/** From Boost libraries. Allows to handle filesystem operations.*/"
    end

    class 128213 "Threadable"
      abstract visibility package 
      cpp_decl "${description}
${template}class ${name}${inherit} {
${members}};
${inlines}"
      java_decl ""
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      associated_diagram classdiagram_ref 128024 // aggregations
      comment "/** Allows a class to be runnable in a separate thread. */"
      operation 128725 "setFrequency"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "frequency" explicit_type "float"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Changes the thread frequency.
\\param frequency the desired new frequency, in Hz. */"
      end

      operation 128341 "getFrequency"
	preserve_cpp_body_indent const public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** \\returns the \\ref frequency at which this thread is trying to run, in Hz. */"
      end

      operation 129749 "isPaused"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** \\return true if the thread is not looping.
\\return false if the thread is running (looping). */"
      end

      operation 128069 "hasToStop"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** \\return true if the thread should stop.
\\return false if the thread should keep running (looping). */"
      end

      operation 129365 "start"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Creates a thread and starts running it. No thread should be \\ref isCreated created already. The loop is run with the \\ref operator() functor method of the class.*/"
      end

      operation 129621 "resume"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Resumes the execution of the thread. The thread should be \\ref isPaused paused and \\ref isCreated created already.*/"
      end

      operation 129237 "pause"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Pauses the execution of the thread. The thread should be \\ref isCreated created already, and should not be already \\ref isPaused paused.*/"
      end

      operation 129493 "stop"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Stops and deletes the thread. The thread should be already \\ref isCreated created.*/"
      end

      operation 128981 "~Threadable"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Regular destructor. Calls \\ref stop in order to terminate the thread. */"
      end

      operation 128197 "safeStop"
	preserve_cpp_body_indent protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Stops and deletes the thread. The thread doesn't need to be already \\ref isCreated created.*/"
      end

      operation 128213 "Threadable"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type ""
	nparams 1
	  param in name "frequency" explicit_type "float"
	cpp_decl "    ${description}${inline}${name}${(}${t0} ${p0}${)}${volatile}${throw};"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} ${p0}${)}${volatile}${throw}: frequency(frequency), shouldStop(false), paused(false), loopStarted(false) {
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Basic threadable constructor. No thread will be spawned until \\ref create is used.
\\param frequency the rate at which the thread will try to loop (in Hz). */"
      end

      operation 130005 "operator()"
	abstract preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Functor method, contains the actual code of the thread. Should be implemented by all derived classes. The method must implement two things:
1: Check for \\ref hasToStop regularly. As soon as it's true, the functor method must exit.
2: Check for isPaused(). If it's true, the functor method should stop doing things, until it becomes false again. Sleeps should be used while waiting. */"
      end

      operation 128325 "startLoop"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Executes the \\ref operator() functor method of the class, then sets \"loopStarted\" to true.*/"
      end

      attribute 128085 "frequency"
	private explicit_type "float"
	multiplicity "1"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};"
	java_decl ""
	php_decl ""
	idl_decl ""
	comment "/** The frequency (in Hz) at which the thread will attempt to run its main loop.*/"
      end

      attribute 128213 "shouldStop"
	private explicit_type "bool"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};"
	java_decl ""
	php_decl ""
	idl_decl ""
	comment "/** False if the currently running thread should be stopped and deleted. Accessed by derived classes using \\ref hasToStop method. */"
      end

      attribute 128341 "paused"
	private explicit_type "bool"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};"
	java_decl ""
	php_decl ""
	idl_decl ""
	comment "/** True if the currently running thread should be paused. */"
      end

      attribute 128069 "loopStarted"
	private explicit_type "bool"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};"
	java_decl ""
	php_decl ""
	idl_decl ""
	comment "/** True if the thread loop has already started. */"
      end

      classrelation 128234 // mutBthread (<directional composition>)
	relation 128234 *-->
	  a role_name "mutBthread" multiplicity "1" private
	    comment "/** A recursive mutex, which should be used to lock the \\ref bthread thread while trying to construct/destruct it, and while accessing the pause/resume/isPaused methods. */"
	    cpp default "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};"
	    classrelation_ref 128234 // mutBthread (<directional composition>)
	  b parent class_ref 128234 // mutex
      end

      classrelation 128597 // bthread (<directional aggregation>)
	relation 128597 o-->
	  stereotype "shared_ptr"
	  a role_name "bthread" multiplicity "1" private
	    comment "/** Holds data related to the boost::thread. */"
	    cpp default "    ${description}${static}${mutable}${volatile}${stereotype}<${type}> ${name}${value};"
	    classrelation_ref 128597 // bthread (<directional aggregation>)
	  b parent class_ref 128341 // thread
      end

      classrelation 128213 // <dependency>
	relation 128213 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 128213 // <dependency>
	  b parent class_ref 128163 // Exception
      end

      classrelation 128106 // <dependency>
	relation 128106 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 128106 // <dependency>
	  b parent class_ref 128106 // bind
      end

      classrelation 128618 // <dependency>
	relation 128618 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 128618 // <dependency>
	  b parent class_ref 128362 // scoped_lock
      end

      classrelation 128746 // <dependency>
	relation 128746 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 128746 // <dependency>
	  b parent class_ref 128618 // posix_time
      end
    end

    class 128085 "Physics"
      abstract visibility package 
      cpp_decl "${description}
${template}class ${name}${inherit} {
${members}};
${inlines}"
      java_decl ""
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/** Implementation of physics engine. */"
      operation 128853 "Physics"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "frequency" explicit_type "float"
	cpp_decl "    ${description}${inline}${name}${(}${t0} ${p0}${)}${volatile}${throw};"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} ${p0}${)}${volatile}${throw}: Threadable(frequency) {
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Simple constructor. */"
      end

      operation 129109 "~Physics"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Simple destructor. */"
      end

      operation 128106 "operator()"
	preserve_cpp_body_indent protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Physics loop method. */"
      end

      classrelation 128085 // <realization>
	relation 128085 -_-|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 128085 // <realization>
	  b parent class_ref 128213 // Threadable
      end
    end

    class 128163 "Exception"
      visibility public 
      cpp_decl "${description}
${template}class ${name}${inherit} {
${members}};
${inlines}"
      java_decl ""
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/** Basic Motorsport exception class. */"
      operation 128291 "Exception"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 1
	  param inout name "description" explicit_type "string"
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}: description(description) {
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Simple constructor.
\\param description a \\ref description of the exception. */"
      end

      operation 128547 "~Exception"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Simple destructor. */"
      end

      operation 128064 "getDescription"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "const string &"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Returns a \\ref description of the exception. Like \\ref what , but using std::strings instead. */"
      end

      operation 128419 "what"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "const char *"
	nparams 0
	nexceptions 1
	  explicit_exception "/**/"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Returns a \\ref description of the exception. \\sa getDescription*/"
      end

      attribute 128035 "description"
	private explicit_type "string"
	multiplicity "1"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};"
	java_decl ""
	php_decl ""
	idl_decl ""
	comment "/** Description of the exception. */"
      end

      classrelation 128291 // <realization>
	relation 128291 -_-|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 128291 // <realization>
	  b parent class_ref 128291 // exception
      end
    end

    class 129637 "Loggable"
      abstract visibility package 
      cpp_decl "${description}
${template}class ${name}${inherit} {
${members}};
${inlines}"
      java_decl ""
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/** By creating a class derived from this, the class acquires the ability to generate detailed logs. */"
      operation 129638 "Loggable"
	preserve_cpp_body_indent protected explicit_return_type ""
	nparams 1
	  param in name "id" explicit_type "string"
	    defaultvalue "\"No name\""
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} {
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Loggable constructor.
\\param string a \\ref name that helps identify logs origin. */"
      end

      operation 129510 "~Loggable"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Simple destructor. */"
      end

      operation 129254 "getId"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "const string"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** \\returns a string that helps identify the object in the generated logs. */"
      end

      operation 128163 "setId"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "string"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Sets the \\ref id to the desired string value. */"
      end

      attribute 129253 "id"
	private explicit_type "string"
	multiplicity "1"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	idl_decl ""
	comment "/** An identifier name for the object to be logged. It will help identify where logs came from. */"
      end

      classrelation 128419 // <dependency>
	relation 128419 -_->
	  a package
	    cpp default "#include in source"
	    classrelation_ref 128419 // <dependency>
	  b parent class_ref 128163 // Exception
      end
    end

    class 129253 "Core"
      visibility package 
      cpp_decl "${description}
${template}class ${name}${inherit} {
${members}};
${inlines}"
      java_decl ""
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/** The main component of Motorsport. In theory, several can be created and used simultaneous and independently. However, usually only one is used for each program. */"
      operation 129253 "Core"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param inout name "world" type class_ref 129381 // Group
	cpp_decl "    ${description}${inline}${name}${(}shared_ptr< ${t0} > ${p0}${)}${volatile}${throw};"
	cpp_def "${description}${inline}${class}::${name}${(}shared_ptr< ${t0} > ${p0}${)}${volatile}${throw} {
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Core constructor.
\\param world the root \\ref Group where all groups will be held. */"
      end

      operation 130278 "Core"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Default constructor. Creates a Group named \"world\" as root group.
\\sa Group */"
      end

      operation 129381 "~Core"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Simple destructor. */"
      end

      operation 128320 "getWorld"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "shared_ptr<Group>"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Returns the \\ref world \\ref Group of this core. */"
      end

      classrelation 129253 // world (<directional aggregation>)
	relation 129253 o-->
	  stereotype "shared_ptr"
	  a role_name "world" multiplicity "1" protected
	    comment "/** Root group of the simulated world. */"
	    cpp default "    ${description}${static}${mutable}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 129253 // world (<directional aggregation>)
	  b parent class_ref 129381 // Group
      end

      classrelation 129877 // engines (<directional aggregation>)
	relation 129877 o-->
	  stereotype "vector_shared_ptr"
	  a role_name "engines" multiplicity "*" protected
	    comment "/** Stores references to all the engines of the simulation. Engines are run at their proposed frequency by the Core. TODO: complete description. */"
	    cpp default "    ${description}${static}${mutable}${volatile}${const}${stereotype}<${type}> > ${name}${value};"
	    classrelation_ref 129877 // engines (<directional aggregation>)
	  b parent class_ref 128213 // Threadable
      end

      classrelation 128064 // <dependency>
	relation 128064 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 128064 // <dependency>
	  b parent class_ref 128163 // Exception
      end

      classrelation 129749 // <dependency>
	relation 129749 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 129749 // <dependency>
	  b parent class_ref 128121 // Os
      end
    end

    class 129381 "Group"
      abstract visibility package 
      nactuals 1
      actual class class_ref 128035 // enable_shared_from_this
        rank 0 value class_ref 129381 // Group
      cpp_decl "${description}
${template}class ${name}${inherit} {
${members}};
${inlines}"
      java_decl ""
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      associated_diagram classdiagram_ref 128024 // aggregations
      comment "/** A Group is a class that can hold other \\ref groups inside it. Each group represents a concept in the Motorsport virtual world, for example a car, a track, a pitbox, a person, etc. Many classes are derived from this. */"
      operation 129766 "Group"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "id" explicit_type "string"
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}: Loggable(id) {
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Simple constructor.
\\param name the name that will be used in its logs. */"
      end

      operation 129894 "~Group"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Simple destructor. */"
      end

      operation 128803 "setId"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "string"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Changes the id of this group. The new id should be unique amongst its siblings' ids. \\sa addChild */"
      end

      operation 130662 "getGlobalId"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "const string"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** \\returns a string that helps identify the object in the generated logs. Syntax is similar unix file paths, using forward slashes for separating a group from its parent. For example \"/world/vehicle/rearLeftWheel\". */"
      end

      operation 129509 "addChild"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "child" type class_ref 129381 // Group
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}shared_ptr< ${t0} > ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}shared_ptr< ${t0} > ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Adds a group to the list of \\ref children of this group. It will first be detached from its previous parent group if necessary. No child id can be shared amongst several children of the same group. */"
      end

      operation 128448 "getChild"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "shared_ptr<Group>"
	nparams 1
	  param in name "id" explicit_type "string"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Returns the child group that has the provided id string. \\sa addChild */"
      end

      operation 128324 "removeChild"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "child" type class_ref 129381 // Group
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}shared_ptr< ${t0} > ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}shared_ptr< ${t0} > ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Removes a child from the list of \\ref children of this group. \\note The child does *not* get deleted unless it's the last reference of it. */"
      end

      operation 130150 "setParent"
	preserve_cpp_body_indent cpp_virtual private explicit_return_type "void"
	nparams 1
	  param inout name "parent" type class_ref 129381 // Group
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}shared_ptr< ${t0} > ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}shared_ptr< ${t0} > ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Changes the \\ref parent group. \\warning It does *not* remove this from the parent's list of \\children. */"
      end

      operation 128704 "isChild"
	preserve_cpp_body_indent const cpp_virtual private explicit_return_type "bool"
	nparams 1
	  param in name "id" explicit_type "string"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Returns true if an inmediate child is found on this group.
\\param id the id of the child to be searched. */"
      end

      operation 128832 "isChild"
	preserve_cpp_body_indent const cpp_virtual private explicit_return_type "bool"
	nparams 1
	  param in name "child" type class_ref 129381 // Group
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}shared_ptr< ${t0} > ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}shared_ptr< ${t0} > ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Returns true if an inmediate child is found on this group.
\\param child the child to be searched. */"
      end

      operation 128576 "isAncestor"
	preserve_cpp_body_indent const cpp_virtual private explicit_return_type "bool"
	nparams 1
	  param inout name "group" type class_ref 129381 // Group
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}shared_ptr< ${t0} > ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}shared_ptr< ${t0} > ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Returns true if any of the ancestors (beginning with this's parent) is the provided group.
\\param group the group to be searched as ancestor. */"
      end

      classrelation 129381 // children (<directional aggregation>)
	relation 129381 o-->
	  stereotype "vector_shared_ptr"
	  a role_name "children" multiplicity "*" private
	    comment "/** Children groups. For example, a car has 4 wheels and a chassis. Therefore, a \"car\" group would contain 5 children groups. */"
	    cpp default "    ${description}${static}${mutable}${volatile}${const}${stereotype}<${type}> > ${name}${value};"
	    classrelation_ref 129381 // children (<directional aggregation>)
	  b parent class_ref 129381 // Group
      end

      classrelation 129509 // parent (<directional aggregation>)
	relation 129509 o-->
	  stereotype "weak_ptr"
	  a role_name "parent" multiplicity "1" private
	    comment "/** Refers to the group that contains this. Each group can only have one parent. The root group parent is zero or null.
\\sa addGroup
\\sa setParent */"
	    cpp default "    ${description}${static}${mutable}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 129509 // parent (<directional aggregation>)
	  b parent class_ref 129381 // Group
      end

      classrelation 129154 // <realization>
	relation 129154 -_-|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 129154 // <realization>
	  b parent class_ref 129637 // Loggable
      end

      classrelation 128163 // <realization>
	relation 128163 -_-|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 128163 // <realization>
	  b parent class_ref 128035 // enable_shared_from_this
      end

      classrelation 128547 // <dependency>
	relation 128547 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 128547 // <dependency>
	  b parent class_ref 128163 // Exception
      end
    end

    class 128121 "Os"
      abstract visibility package 
      cpp_decl "${description}
${template}class ${name}${inherit} {
${members}};
${inlines}"
      java_decl ""
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/** Handles all OS specific issues. Also, it guesses the current operating system, and defines MOTORSPORT_OS_PLATFORM accordingly. */"
      operation 131157 "getSharePath"
	class_operation preserve_cpp_body_indent private explicit_return_type "string"
	nparams 1
	  param inout name "filepath" explicit_type "string"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Locates the path to our application resources directory (share in unix systems). */"
      end

      operation 128071 "getDataPath"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 1
	  param inout name "filepath" explicit_type "string"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Returns the relative path to the specified data file. The file must exist. */"
      end

      operation 128199 "getCfgPath"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 1
	  param inout name "filepath" explicit_type "string"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Returns the relative path to the specified configuration file. The file must exist. */"
      end

      operation 128327 "getLogsPath"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 1
	  param inout name "filepath" explicit_type "string"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Returns the relative path to the specified log filename. The file must exist.*/"
      end

      operation 128455 "isFileReadable"
	class_operation preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param inout name "filepath" explicit_type "string"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}"
	preserve_java_body_indent 
	preserve_php_body_indent 
	
	comment "/** Checks if the file is readable.
\\param filepath the path and name, either absolute or relative, of the file that is to be checked for readability.
\\returns true if file can be read.
\\returns false if file can not be read. */"
      end

      classrelation 128071 // <dependency>
	relation 128071 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 128071 // <dependency>
	  b parent class_ref 128071 // operations
      end

      classrelation 128199 // <dependency>
	relation 128199 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 128199 // <dependency>
	  b parent class_ref 128163 // Exception
      end
    end
  end
end
